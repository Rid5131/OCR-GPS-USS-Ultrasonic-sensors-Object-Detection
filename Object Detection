#Object Detection
import cv2
import pytesseract
import pyttsx3
from PIL import Image
import io
import time
import picamera
import RPi.GPIO as GPIO

# Set up GPIO pins
GPIO.setmode(GPIO.BCM)
GPIO.setup(17, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(27, GPIO.IN, pull_up_down=GPIO.PUD_UP)

# Initialize text-to-speech engine
engine = pyttsx3.init()
engine.setProperty('rate', 123)

# Object detection function
def getObjects(img, thres, nms, draw=True, objects=[]):
    classNames = []
    classFile = "/home/jatin/Desktop/Object_Detection_Files/coco.names"
    with open(classFile, "rt") as f:
        classNames = f.read().rstrip("\n").split("\n")

    configPath = "/home/jatin/Desktop/Object_Detection_Files/ssd_mobilenet_v3_large_coco_2020_01_14.pbtxt"
    weightsPath = "/home/jatin/Desktop/Object_Detection_Files/frozen_inference_graph.pb"

    net = cv2.dnn_DetectionModel(weightsPath, configPath)
    net.setInputSize(320, 320)
    net.setInputScale(1.0 / 127.5)
    net.setInputMean((127.5, 127.5, 127.5))
    net.setInputSwapRB(True)

    classIds, confs, bbox = net.detect(img, confThreshold=thres, nmsThreshold=nms)
    if len(objects) == 0: 
        objects = classNames
    objectInfo = []
    if len(classIds) != 0:
        for classId, confidence, box in zip(classIds.flatten(), confs.flatten(), bbox):
            className = classNames[classId - 1]
            if className in objects:
                objectInfo.append([box, className])
                if draw:
                    cv2.rectangle(img, box, color=(0, 255, 0), thickness=2)
                    cv2.putText(img, classNames[classId - 1].upper(), (box[0] + 10, box[1] + 30),
                                cv2.FONT_HERSHEY_COMPLEX, 1, (0, 255, 0), 2)
                    cv2.putText(img, str(round(confidence * 100, 2)), (box[0] + 200, box[1] + 30),
                                cv2.FONT_HERSHEY_COMPLEX, 1, (0, 255, 0), 2)
                    engine.say(classNames[classId - 1])
                    engine.runAndWait()

    return img, objectInfo

# OCR function
def ocr():
    # Initialize the camera
    with picamera.PiCamera() as camera:
        camera.start_preview()
        time.sleep(2)  # Wait for camera to adjust to light
        stream = io.BytesIO()
        camera.capture(stream, format='jpeg')
        stream.seek(0)
        image = Image.open(stream)

    # Pass the image to the Tesseract OCR engine to extract text
    text = pytesseract.image_to_string(image)
    print(text)

    # Convert the extracted text to audio
    engine.say(text)
    engine.runAndWait()

# Main loop
while True:
    # Check if switch 17 is turned on
    if GPIO.input(17) == GPIO.LOW:
        cap = cv2.VideoCapture(0)
        cap.set(3, 640)
        cap.set(4, 480)

        while True:
            success, img = cap.read()
            if success:
                result, objectInfo = getObjects(img, 0.45, 0.2)
                cv2.imshow("Output", result)

                # Exit loop on key press
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break

        cap.release()
        cv2.destroyAllWindows()

    # Check if switch 27 is turned on
    if GPIO.input(27) == GPIO.LOW:
        ocr()
